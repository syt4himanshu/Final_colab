version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: student_mentor_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: student_mentor
      MYSQL_USER: appuser
      MYSQL_PASSWORD: apppassword
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./sql/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: student_mentor_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: appuser
      DB_PASSWORD: apppassword
      DB_NAME: student_mentor
      DB_CONN_LIMIT: 10
      JWT_ACCESS_SECRET: dev_access_secret_change_in_production
      JWT_REFRESH_SECRET: dev_refresh_secret_change_in_production
      JWT_ACCESS_EXPIRES: 15m
      JWT_REFRESH_EXPIRES: 7d
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ../student-mentor-system
      dockerfile: Dockerfile
    container_name: student_mentor_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_BASE_URL: http://localhost:5000/api
      REACT_APP_ENV: development
      REACT_APP_ENABLE_MOCK_API: false
    ports:
      - "3000:80"
    volumes:
      - ../student-mentor-system:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - app-network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: student_mentor_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    profiles:
      - production

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: student_mentor_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    profiles:
      - production

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
